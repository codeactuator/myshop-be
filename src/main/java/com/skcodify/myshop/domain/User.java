package com.skcodify.myshop.domain;

import jakarta.persistence.*;
import com.fasterxml.jackson.annotation.JsonManagedReference;
import java.util.List;

/**
 * Represents a user in the system.
 * This entity is mapped to the "users" table in the database.
 */
@Entity
@Table(name = "users") // Specifies the table name in the database
public class User {

    /**
     * The unique identifier for the user.
     * It is automatically generated by the database.
     */
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    /**
     * The full name of the user.
     */
    private String name;

    /**
     * The apartment number of the user, for delivery purposes.
     */
    private String apartmentNumber;

    /**
     * The user's email address. It must be unique.
     */
    @Column(unique = true)
    private String email;

    /**
     * The user's phone number. It must be unique.
     */
    @Column(unique = true)
    private String phone;

    /**
     * The type of user (e.g., BUYER, SELLER, ADMIN).
     */
    @Enumerated(EnumType.STRING)
    private UserType userType;

    /**
     * The name of the user's shop, applicable if the user is a seller.
     */
    private String shopName;

    /**
     * Flag to indicate if the user's account has been verified.
     */
    private boolean isVerified;

    /**
     * Flag to indicate if the user's account is blocked.
     */
    private boolean isBlocked;

    /**
     * The user's UPI (Unified Payments Interface) ID for receiving payments.
     */
    private String upiId;

    /**
     * The URL to the user's QR code for UPI payments.
     */
    private String paymentQrUrl;

    /**
     * The list of products listed by this user (if they are a seller).
     * This is a one-to-many relationship, where one user can have multiple products.
     * The 'mappedBy' attribute indicates that the 'seller' field in the Product entity owns the relationship.
     */
    @OneToMany(mappedBy = "seller")
    @JsonManagedReference
    private List<Product> products;

    // Constructors

    /**
     * Default constructor for JPA.
     */
    public User() {
    }

    // Getters and Setters

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public String getApartmentNumber() {
        return apartmentNumber;
    }

    public void setApartmentNumber(String apartmentNumber) {
        this.apartmentNumber = apartmentNumber;
    }

    public String getEmail() {
        return email;
    }

    public void setEmail(String email) {
        this.email = email;
    }

    public String getPhone() {
        return phone;
    }

    public void setPhone(String phone) {
        this.phone = phone;
    }

    public UserType getUserType() {
        return userType;
    }

    public void setUserType(UserType userType) {
        this.userType = userType;
    }

    public String getShopName() {
        return shopName;
    }

    public void setShopName(String shopName) {
        this.shopName = shopName;
    }

    public boolean isVerified() {
        return isVerified;
    }

    public void setVerified(boolean verified) {
        isVerified = verified;
    }

    public boolean isBlocked() {
        return isBlocked;
    }

    public void setBlocked(boolean blocked) {
        isBlocked = blocked;
    }

    public List<Product> getProducts() {
        return products;
    }

    public void setProducts(List<Product> products) {
        this.products = products;
    }

    public String getUpiId() {
        return upiId;
    }

    public void setUpiId(String upiId) {
        this.upiId = upiId;
    }

    public String getPaymentQrUrl() {
        return paymentQrUrl;
    }

    public void setPaymentQrUrl(String paymentQrUrl) {
        this.paymentQrUrl = paymentQrUrl;
    }
}